apiVersion: policy.cert-manager.io/v1alpha1
kind: CertificateRequestPolicy
metadata:
  name: base-policy
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  allowed:
    commonName:
      validations:
        - rule: |
            !self.contains('.') ||
            self.endsWith('.%s'.format([cr.namespace])) ||
            self.endsWith('.%s.svc'.format([cr.namespace])) ||
            self.endsWith('.%s.svc.cluster.local'.format([cr.namespace])) ||
            self.endsWith('.%s.svc.cluster.local.'.format([cr.namespace]))
    dnsNames:
      validations:
        - rule: |
            !self.contains('.') ||
            self.endsWith('.%s'.format([cr.namespace])) ||
            self.endsWith('.%s.svc'.format([cr.namespace])) ||
            self.endsWith('.%s.svc.cluster.local'.format([cr.namespace])) ||
            self.endsWith('.%s.svc.cluster.local.'.format([cr.namespace]))
    isCA: true
    usages:
      - server auth
      - client auth
      - digital signature
      - key encipherment
      - cert sign
  selector:
    issuerRef: {}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: base-policy-user
  annotations:
    argocd.argoproj.io/sync-wave: "1"
rules:
  - apiGroups:
      - policy.cert-manager.io
    resources:
      - certificaterequestpolicies
    verbs:
      - use
    resourceNames:
      - base-policy
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: base-policy-user
  annotations:
    argocd.argoproj.io/sync-wave: "1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: base-policy-user
subjects:
  - kind: Group
    name: system:authenticated
    apiGroup: rbac.authorization.k8s.io
