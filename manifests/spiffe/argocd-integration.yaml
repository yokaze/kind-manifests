apiVersion: v1
kind: Namespace
metadata:
  name: argocd-integration
---
apiVersion: v1
data:
  script: |
    #!/usr/bin/bash
    curl -sk https://spire-spiffe-oidc-discovery-provider.spire-server/keys > /tmp/spire-keys
    cat > /tmp/template.json <<'EOF'
    {
      "allow_any_subject": true,
      "expires_at": "2030-01-01T00:00:00Z",
      "issuer": "https://oidc-discovery.yokaze.github.io",
      "scope": ["openid", "offline"]
    }
    EOF
    jq -s '.[0] + { "jwk": .[1].keys[0] }' /tmp/template.json /tmp/spire-keys > /tmp/issuer
    curl -s http://hydra-admin.hydra-system:4445/admin/trust/grants/jwt-bearer/issuers -X POST -d @/tmp/issuer
    curl -s http://hydra-admin.hydra-system:4445/admin/trust/grants/jwt-bearer/issuers | jq .
    curl -sL -o /tmp/hydra.tar.gz https://github.com/ory/hydra/releases/download/v2.2.0/hydra_2.2.0-linux_64bit.tar.gz
    tar xzvf /tmp/hydra.tar.gz -O hydra > /tmp/hydra
    chmod +x /tmp/hydra

    for i in $(/tmp/hydra --endpoint http://hydra-admin.hydra-system:4445 list clients --format json | jq -r '.items[].client_id'); do
        /tmp/hydra --endpoint http://hydra-admin.hydra-system:4445 delete client $i
    done
    /tmp/hydra --endpoint http://hydra-admin.hydra-system:4445 list clients
    /tmp/hydra --endpoint http://hydra-admin.hydra-system:4445 create client --name argocd-client --grant-type 'urn:ietf:params:oauth:grant-type:jwt-bearer' --format json | jq . > /tmp/client.json
    /tmp/hydra --endpoint http://hydra-admin.hydra-system:4445 create client --name argocd-server --format json | jq . > /tmp/argocd.json
    /tmp/hydra --endpoint http://hydra-admin.hydra-system:4445 list clients --format json | jq .

    curl -sL -o /tmp/kubectl https://dl.k8s.io/release/$(curl -sL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x /tmp/kubectl

    if /tmp/kubectl get secret oauth2-client 2>/dev/null; then
        /tmp/kubectl delete secret oauth2-client
    fi
    /tmp/kubectl create secret generic oauth2-client \
        --from-literal=client_id=$(cat /tmp/client.json | jq -r '.client_id') \
        --from-literal=client_secret=$(cat /tmp/client.json | jq -r '.client_secret')
    pause
kind: ConfigMap
metadata:
  name: integration-helper
  namespace: argocd-integration
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: integration-helper
  namespace: argocd-integration
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: integration-helper
  namespace: argocd-integration
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: integration-helper
    namespace: argocd-integration
  - kind: ServiceAccount
    name: client
    namespace: argocd-integration
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubectl.kubernetes.io/default-container: ubuntu
  name: integration-helper
  namespace: argocd-integration
spec:
  containers:
    - command:
        - bash
        - -x
        - /config/script
      image: ghcr.io/cybozu/ubuntu-debug:22.04
      name: ubuntu
      volumeMounts:
        - mountPath: /tmp
          name: tmp
        - mountPath: /config
          name: config
  serviceAccountName: integration-helper
  volumes:
    - emptyDir: {}
      name: tmp
    - configMap:
        name: integration-helper
      name: config
---
apiVersion: v1
data:
  script: |
    #!/usr/bin/bash
    curl -sL -o /tmp/argocd https://github.com/argoproj/argo-cd/releases/download/v2.13.0/argocd-linux-amd64
    chmod +x /tmp/argocd
    curl -sL -o /tmp/kubectl https://dl.k8s.io/release/$(curl -sL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x /tmp/kubectl

    curl -sL -o /tmp/hydra.tar.gz https://github.com/ory/hydra/releases/download/v2.2.0/hydra_2.2.0-linux_64bit.tar.gz
    tar xzvf /tmp/hydra.tar.gz -O hydra > /tmp/hydra
    chmod +x /tmp/hydra

    ADMIN_PASSWORD=$(/tmp/kubectl get secret -n argocd argocd-initial-admin-secret -o json | jq -r .data.password | base64 -d)
    /tmp/argocd login argocd-server.argocd --username admin --password ${ADMIN_PASSWORD} --plaintext
    /tmp/argocd app list
    /tmp/argocd logout argocd-server.argocd

    CLIENT_ID=$(/tmp/kubectl get secret oauth2-client -ojson | jq -r .data.client_id | base64 -d)
    CLIENT_SECRET=$(/tmp/kubectl get secret oauth2-client -ojson | jq -r .data.client_secret | base64 -d)
    CLIENT_AUTH=$(echo -n "${CLIENT_ID}:${CLIENT_SECRET}" | base64 -w0)

    JWT_SVID=$(cat /certs/jwt_svid.token)

    curl -sk http://hydra-public.hydra-system:4444/oauth2/token \
    --header 'Content-Type: application/x-www-form-urlencoded' \
    --header "Authorization: Basic ${CLIENT_AUTH}" \
    --data-urlencode 'grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer' \
    --data-urlencode "assertion=${JWT_SVID}" | jq .
kind: ConfigMap
metadata:
  name: client-script
  namespace: argocd-integration
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: client
  namespace: argocd-integration
---
apiVersion: v1
data:
  spiffe-helper.conf: |
    agent_address = "/spiffe-workload-api/spire-agent.sock"
    cert_dir = "/certs"
    svid_file_name = "tls.crt"
    svid_key_file_name = "tls.key"
    svid_bundle_file_name = "ca.pem"
    jwt_svids = [{jwt_audience="https://hydra-public.hydra-system/oauth2/token", jwt_svid_file_name="jwt_svid.token"}]
kind: ConfigMap
metadata:
  name: client
  namespace: argocd-integration
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubectl.kubernetes.io/default-container: ubuntu
  name: client
  namespace: argocd-integration
spec:
  containers:
    - command:
        - pause
      image: ghcr.io/cybozu/ubuntu-debug:22.04
      name: ubuntu
      volumeMounts:
        - mountPath: /tmp
          name: tmp
        - mountPath: /certs
          name: certs
        - mountPath: /script
          name: script
    - args:
        - -config
        - /etc/spiffe-helper.conf
      image: ghcr.io/spiffe/spiffe-helper:0.8.0
      name: spiffe-helper
      volumeMounts:
        - mountPath: /spiffe-workload-api
          name: spiffe-workload-api
          readOnly: true
        - mountPath: /etc/spiffe-helper.conf
          name: config
          readOnly: true
          subPath: spiffe-helper.conf
        - mountPath: /certs
          name: certs
  serviceAccountName: client
  volumes:
    - emptyDir: {}
      name: tmp
    - csi:
        driver: csi.spiffe.io
        readOnly: true
      name: spiffe-workload-api
    - configMap:
        name: client
      name: config
    - emptyDir: {}
      name: certs
    - configMap:
        name: client-script
      name: script
